//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generation date: 7/15/2020 12:12:07 PM
namespace TestODataCore
{
    /// <summary>
    /// There are no comments for Container in the schema.
    /// </summary>
    public partial class Container : global::Microsoft.OData.Client.DataServiceContext
    {
        /// <summary>
        /// Initialize a new Container object.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        public Container(global::System.Uri serviceRoot) : 
                base(serviceRoot, global::Microsoft.OData.Client.ODataProtocolVersion.V4)
        {
            this.ResolveName = new global::System.Func<global::System.Type, string>(this.ResolveNameFromType);
            this.ResolveType = new global::System.Func<string, global::System.Type>(this.ResolveTypeFromName);
            this.OnContextCreated();
            this.Format.LoadServiceModel = GeneratedEdmModel.GetInstance;
            this.Format.UseJson();
        }
        partial void OnContextCreated();
        /// <summary>
        /// Since the namespace configured for this service reference
        /// in Visual Studio is different from the one indicated in the
        /// server schema, use type-mappers to map between the two.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        protected global::System.Type ResolveTypeFromName(string typeName)
        {
            global::System.Type resolvedType = this.DefaultResolveType(typeName, "TestODataCore", "TestODataCore");
            if ((resolvedType != null))
            {
                return resolvedType;
            }
            return null;
        }
        /// <summary>
        /// Since the namespace configured for this service reference
        /// in Visual Studio is different from the one indicated in the
        /// server schema, use type-mappers to map between the two.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        protected string ResolveNameFromType(global::System.Type clientType)
        {
            if (clientType.Namespace.Equals("TestODataCore", global::System.StringComparison.Ordinal))
            {
                return string.Concat("TestODataCore.", clientType.Name);
            }
            return null;
        }
        /// <summary>
        /// There are no comments for WeatherForecasts in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        public global::Microsoft.OData.Client.DataServiceQuery<WeatherForecast> WeatherForecasts
        {
            get
            {
                if ((this._WeatherForecasts == null))
                {
                    this._WeatherForecasts = base.CreateQuery<WeatherForecast>("WeatherForecasts");
                }
                return this._WeatherForecasts;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        private global::Microsoft.OData.Client.DataServiceQuery<WeatherForecast> _WeatherForecasts;
        /// <summary>
        /// There are no comments for WeatherReadings in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        public global::Microsoft.OData.Client.DataServiceQuery<WeatherReading> WeatherReadings
        {
            get
            {
                if ((this._WeatherReadings == null))
                {
                    this._WeatherReadings = base.CreateQuery<WeatherReading>("WeatherReadings");
                }
                return this._WeatherReadings;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        private global::Microsoft.OData.Client.DataServiceQuery<WeatherReading> _WeatherReadings;
        /// <summary>
        /// There are no comments for WeatherForecasts in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        public void AddToWeatherForecasts(WeatherForecast weatherForecast)
        {
            base.AddObject("WeatherForecasts", weatherForecast);
        }
        /// <summary>
        /// There are no comments for WeatherReadings in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        public void AddToWeatherReadings(WeatherReading weatherReading)
        {
            base.AddObject("WeatherReadings", weatherReading);
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        private abstract class GeneratedEdmModel
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
            private static global::Microsoft.OData.Edm.IEdmModel ParsedModel = LoadModelFromString();
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
            private const string Edmx = @"<edmx:Edmx Version=""4.0"" xmlns:edmx=""http://docs.oasis-open.org/odata/ns/edmx"">
  <edmx:DataServices>
    <Schema Namespace=""TestODataCore"" xmlns=""http://docs.oasis-open.org/odata/ns/edm"">
      <EntityType Name=""WeatherForecast"">
        <Key>
          <PropertyRef Name=""Id"" />
        </Key>
        <Property Name=""Id"" Type=""Edm.Guid"" Nullable=""false"" />
        <Property Name=""Date"" Type=""Edm.DateTimeOffset"" Nullable=""false"" />
        <Property Name=""Summary"" Type=""Edm.String"" />
        <NavigationProperty Name=""Readings"" Type=""Collection(TestODataCore.WeatherReading)"" />
      </EntityType>
      <EntityType Name=""WeatherReading"">
        <Key>
          <PropertyRef Name=""Id"" />
        </Key>
        <Property Name=""Id"" Type=""Edm.Guid"" Nullable=""false"" />
        <Property Name=""ForecastId"" Type=""Edm.Guid"" Nullable=""false"" />
        <Property Name=""Temperature"" Type=""Edm.Int32"" Nullable=""false"" />
        <Property Name=""TemperatureSystem"" Type=""Edm.String"" />
        <NavigationProperty Name=""Forecast"" Type=""TestODataCore.WeatherForecast"" />
      </EntityType>
      <EntityContainer Name=""Container"">
        <EntitySet Name=""WeatherForecasts"" EntityType=""TestODataCore.WeatherForecast"">
          <NavigationPropertyBinding Path=""Readings"" Target=""WeatherReadings"" />
        </EntitySet>
        <EntitySet Name=""WeatherReadings"" EntityType=""TestODataCore.WeatherReading"">
          <NavigationPropertyBinding Path=""Forecast"" Target=""WeatherForecasts"" />
        </EntitySet>
      </EntityContainer>
    </Schema>
  </edmx:DataServices>
</edmx:Edmx>";
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
            public static global::Microsoft.OData.Edm.IEdmModel GetInstance()
            {
                return ParsedModel;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
            private static global::Microsoft.OData.Edm.IEdmModel LoadModelFromString()
            {
                global::System.Xml.XmlReader reader = CreateXmlReader(Edmx);
                try
                {
                    global::System.Collections.Generic.IEnumerable<global::Microsoft.OData.Edm.Validation.EdmError> errors;
                    global::Microsoft.OData.Edm.IEdmModel edmModel;
                    
                    if (!global::Microsoft.OData.Edm.Csdl.CsdlReader.TryParse(reader, true, out edmModel, out errors))
                    {
                        global::System.Text.StringBuilder errorMessages = new System.Text.StringBuilder();
                        foreach (var error in errors)
                        {
                            errorMessages.Append(error.ErrorMessage);
                            errorMessages.Append("; ");
                        }
                        throw new global::System.InvalidOperationException(errorMessages.ToString());
                    }

                    return edmModel;
                }
                finally
                {
                    ((global::System.IDisposable)(reader)).Dispose();
                }
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
            private static global::System.Xml.XmlReader CreateXmlReader(string edmxToParse)
            {
                return global::System.Xml.XmlReader.Create(new global::System.IO.StringReader(edmxToParse));
            }
        }
    }
    /// <summary>
    /// There are no comments for WeatherForecastSingle in the schema.
    /// </summary>
    public partial class WeatherForecastSingle : global::Microsoft.OData.Client.DataServiceQuerySingle<WeatherForecast>
    {
        /// <summary>
        /// Initialize a new WeatherForecastSingle object.
        /// </summary>
        public WeatherForecastSingle(global::Microsoft.OData.Client.DataServiceContext context, string path)
            : base(context, path) {}

        /// <summary>
        /// Initialize a new WeatherForecastSingle object.
        /// </summary>
        public WeatherForecastSingle(global::Microsoft.OData.Client.DataServiceContext context, string path, bool isComposable)
            : base(context, path, isComposable) {}

        /// <summary>
        /// Initialize a new WeatherForecastSingle object.
        /// </summary>
        public WeatherForecastSingle(global::Microsoft.OData.Client.DataServiceQuerySingle<WeatherForecast> query)
            : base(query) {}

        /// <summary>
        /// There are no comments for Readings in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        public global::Microsoft.OData.Client.DataServiceQuery<global::TestODataCore.WeatherReading> Readings
        {
            get
            {
                if (!this.IsComposable)
                {
                    throw new global::System.NotSupportedException("The previous function is not composable.");
                }
                if ((this._Readings == null))
                {
                    this._Readings = Context.CreateQuery<global::TestODataCore.WeatherReading>(GetPath("Readings"));
                }
                return this._Readings;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        private global::Microsoft.OData.Client.DataServiceQuery<global::TestODataCore.WeatherReading> _Readings;
    }
    /// <summary>
    /// There are no comments for WeatherForecast in the schema.
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [global::Microsoft.OData.Client.Key("Id")]
    [global::Microsoft.OData.Client.EntitySet("WeatherForecasts")]
    public partial class WeatherForecast : global::Microsoft.OData.Client.BaseEntityType, global::System.ComponentModel.INotifyPropertyChanged
    {
        /// <summary>
        /// Create a new WeatherForecast object.
        /// </summary>
        /// <param name="ID">Initial value of Id.</param>
        /// <param name="date">Initial value of Date.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        public static WeatherForecast CreateWeatherForecast(global::System.Guid ID, global::System.DateTimeOffset date)
        {
            WeatherForecast weatherForecast = new WeatherForecast();
            weatherForecast.Id = ID;
            weatherForecast.Date = date;
            return weatherForecast;
        }
        /// <summary>
        /// There are no comments for Property Id in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        public global::System.Guid Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                this.OnIdChanging(value);
                this._Id = value;
                this.OnIdChanged();
                this.OnPropertyChanged("Id");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        private global::System.Guid _Id;
        partial void OnIdChanging(global::System.Guid value);
        partial void OnIdChanged();
        /// <summary>
        /// There are no comments for Property Date in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        public global::System.DateTimeOffset Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                this.OnDateChanging(value);
                this._Date = value;
                this.OnDateChanged();
                this.OnPropertyChanged("Date");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        private global::System.DateTimeOffset _Date;
        partial void OnDateChanging(global::System.DateTimeOffset value);
        partial void OnDateChanged();
        /// <summary>
        /// There are no comments for Property Summary in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        public string Summary
        {
            get
            {
                return this._Summary;
            }
            set
            {
                this.OnSummaryChanging(value);
                this._Summary = value;
                this.OnSummaryChanged();
                this.OnPropertyChanged("Summary");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        private string _Summary;
        partial void OnSummaryChanging(string value);
        partial void OnSummaryChanged();
        /// <summary>
        /// There are no comments for Property Readings in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        public global::Microsoft.OData.Client.DataServiceCollection<global::TestODataCore.WeatherReading> Readings
        {
            get
            {
                return this._Readings;
            }
            set
            {
                this.OnReadingsChanging(value);
                this._Readings = value;
                this.OnReadingsChanged();
                this.OnPropertyChanged("Readings");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        private global::Microsoft.OData.Client.DataServiceCollection<global::TestODataCore.WeatherReading> _Readings = new global::Microsoft.OData.Client.DataServiceCollection<global::TestODataCore.WeatherReading>(null, global::Microsoft.OData.Client.TrackingMode.None);
        partial void OnReadingsChanging(global::Microsoft.OData.Client.DataServiceCollection<global::TestODataCore.WeatherReading> value);
        partial void OnReadingsChanged();
        /// <summary>
        /// This event is raised when the value of the property is changed
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        /// <summary>
        /// The value of the property is changed
        /// </summary>
        /// <param name="property">property name</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        protected virtual void OnPropertyChanged(string property)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new global::System.ComponentModel.PropertyChangedEventArgs(property));
            }
        }
    }
    /// <summary>
    /// There are no comments for WeatherReadingSingle in the schema.
    /// </summary>
    public partial class WeatherReadingSingle : global::Microsoft.OData.Client.DataServiceQuerySingle<WeatherReading>
    {
        /// <summary>
        /// Initialize a new WeatherReadingSingle object.
        /// </summary>
        public WeatherReadingSingle(global::Microsoft.OData.Client.DataServiceContext context, string path)
            : base(context, path) {}

        /// <summary>
        /// Initialize a new WeatherReadingSingle object.
        /// </summary>
        public WeatherReadingSingle(global::Microsoft.OData.Client.DataServiceContext context, string path, bool isComposable)
            : base(context, path, isComposable) {}

        /// <summary>
        /// Initialize a new WeatherReadingSingle object.
        /// </summary>
        public WeatherReadingSingle(global::Microsoft.OData.Client.DataServiceQuerySingle<WeatherReading> query)
            : base(query) {}

        /// <summary>
        /// There are no comments for Forecast in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        public global::TestODataCore.WeatherForecastSingle Forecast
        {
            get
            {
                if (!this.IsComposable)
                {
                    throw new global::System.NotSupportedException("The previous function is not composable.");
                }
                if ((this._Forecast == null))
                {
                    this._Forecast = new global::TestODataCore.WeatherForecastSingle(this.Context, GetPath("Forecast"));
                }
                return this._Forecast;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        private global::TestODataCore.WeatherForecastSingle _Forecast;
    }
    /// <summary>
    /// There are no comments for WeatherReading in the schema.
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [global::Microsoft.OData.Client.Key("Id")]
    [global::Microsoft.OData.Client.EntitySet("WeatherReadings")]
    public partial class WeatherReading : global::Microsoft.OData.Client.BaseEntityType, global::System.ComponentModel.INotifyPropertyChanged
    {
        /// <summary>
        /// Create a new WeatherReading object.
        /// </summary>
        /// <param name="ID">Initial value of Id.</param>
        /// <param name="forecastId">Initial value of ForecastId.</param>
        /// <param name="temperature">Initial value of Temperature.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        public static WeatherReading CreateWeatherReading(global::System.Guid ID, global::System.Guid forecastId, int temperature)
        {
            WeatherReading weatherReading = new WeatherReading();
            weatherReading.Id = ID;
            weatherReading.ForecastId = forecastId;
            weatherReading.Temperature = temperature;
            return weatherReading;
        }
        /// <summary>
        /// There are no comments for Property Id in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        public global::System.Guid Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                this.OnIdChanging(value);
                this._Id = value;
                this.OnIdChanged();
                this.OnPropertyChanged("Id");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        private global::System.Guid _Id;
        partial void OnIdChanging(global::System.Guid value);
        partial void OnIdChanged();
        /// <summary>
        /// There are no comments for Property ForecastId in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        public global::System.Guid ForecastId
        {
            get
            {
                return this._ForecastId;
            }
            set
            {
                this.OnForecastIdChanging(value);
                this._ForecastId = value;
                this.OnForecastIdChanged();
                this.OnPropertyChanged("ForecastId");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        private global::System.Guid _ForecastId;
        partial void OnForecastIdChanging(global::System.Guid value);
        partial void OnForecastIdChanged();
        /// <summary>
        /// There are no comments for Property Temperature in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        public int Temperature
        {
            get
            {
                return this._Temperature;
            }
            set
            {
                this.OnTemperatureChanging(value);
                this._Temperature = value;
                this.OnTemperatureChanged();
                this.OnPropertyChanged("Temperature");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        private int _Temperature;
        partial void OnTemperatureChanging(int value);
        partial void OnTemperatureChanged();
        /// <summary>
        /// There are no comments for Property TemperatureSystem in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        public string TemperatureSystem
        {
            get
            {
                return this._TemperatureSystem;
            }
            set
            {
                this.OnTemperatureSystemChanging(value);
                this._TemperatureSystem = value;
                this.OnTemperatureSystemChanged();
                this.OnPropertyChanged("TemperatureSystem");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        private string _TemperatureSystem;
        partial void OnTemperatureSystemChanging(string value);
        partial void OnTemperatureSystemChanged();
        /// <summary>
        /// There are no comments for Property Forecast in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        public global::TestODataCore.WeatherForecast Forecast
        {
            get
            {
                return this._Forecast;
            }
            set
            {
                this.OnForecastChanging(value);
                this._Forecast = value;
                this.OnForecastChanged();
                this.OnPropertyChanged("Forecast");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        private global::TestODataCore.WeatherForecast _Forecast;
        partial void OnForecastChanging(global::TestODataCore.WeatherForecast value);
        partial void OnForecastChanged();
        /// <summary>
        /// This event is raised when the value of the property is changed
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        /// <summary>
        /// The value of the property is changed
        /// </summary>
        /// <param name="property">property name</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "7.5.1")]
        protected virtual void OnPropertyChanged(string property)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new global::System.ComponentModel.PropertyChangedEventArgs(property));
            }
        }
    }
    /// <summary>
    /// Class containing all extension methods
    /// </summary>
    public static class ExtensionMethods
    {
        /// <summary>
        /// Get an entity of type global::TestODataCore.WeatherForecast as global::TestODataCore.WeatherForecastSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="keys">dictionary with the names and values of keys</param>
        public static global::TestODataCore.WeatherForecastSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::TestODataCore.WeatherForecast> source, global::System.Collections.Generic.Dictionary<string, object> keys)
        {
            return new global::TestODataCore.WeatherForecastSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// Get an entity of type global::TestODataCore.WeatherForecast as global::TestODataCore.WeatherForecastSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="id">The value of id</param>
        public static global::TestODataCore.WeatherForecastSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::TestODataCore.WeatherForecast> source,
            global::System.Guid id)
        {
            global::System.Collections.Generic.Dictionary<string, object> keys = new global::System.Collections.Generic.Dictionary<string, object>
            {
                { "Id", id }
            };
            return new global::TestODataCore.WeatherForecastSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// Get an entity of type global::TestODataCore.WeatherReading as global::TestODataCore.WeatherReadingSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="keys">dictionary with the names and values of keys</param>
        public static global::TestODataCore.WeatherReadingSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::TestODataCore.WeatherReading> source, global::System.Collections.Generic.Dictionary<string, object> keys)
        {
            return new global::TestODataCore.WeatherReadingSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// Get an entity of type global::TestODataCore.WeatherReading as global::TestODataCore.WeatherReadingSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="id">The value of id</param>
        public static global::TestODataCore.WeatherReadingSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::TestODataCore.WeatherReading> source,
            global::System.Guid id)
        {
            global::System.Collections.Generic.Dictionary<string, object> keys = new global::System.Collections.Generic.Dictionary<string, object>
            {
                { "Id", id }
            };
            return new global::TestODataCore.WeatherReadingSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
    }
}
